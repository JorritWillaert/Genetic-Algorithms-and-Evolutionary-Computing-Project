Automatically generated by Mendeley Desktop 1.19.8
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@article{machine_learning_heuristic,
abstract = {Admissible heuristics are an important class of heuristics worth discovering: they guarantee shortest path solutions in search algorithms such as A* and they guarantee less expensively produced, but boundedly longer solutions in search algorithms such as dynamic weighting. Unfortunately, effective (accurate and cheap to compute) admissible heuristics can take years for people to discover. Several researchers have suggested that certain transformations of a problem can be used to generate admissible heuristics. This article defines a more general class of transformations, called abstractions, that are guaranteed to generate only admissible heuristics. It also describes and evaluates an implemented program (Absolver II) that uses a means-ends analysis search control strategy to discover abstracted problems that result in effective admissible heuristics. Absolver II discovered several well-known and a few novel admissible heuristics, including the first known effective one for Rubik's Cube, thus concretely demonstrating that effective admissible heuristics can be tractably discovered by a machine. {\textcopyright} 1993, Kluwer Academic Publishers. All rights reserved.},
author = {Prieditis, Armand E.},
doi = {10.1023/A:1022875501978},
file = {:home/jorrit/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Prieditis - 1993 - Machine Discovery of Effective Admissible Heuristics.pdf:pdf},
issn = {15730565},
journal = {Machine Learning},
keywords = {Machine discovery,abstraction,admissible heuristics,search},
number = {1},
pages = {117--141},
title = {{Machine Discovery of Effective Admissible Heuristics}},
volume = {12},
year = {1993}
}
@article{pattern_database,
abstract = {The efficiency of A* searching depends on the quality of the lower bound estimates of the solution cost. Pattern databases enumerate all possible subgoals required by any solution, subject to constraints on the subgoal size. Each subgoal in the database provides a tight lower bound on the cost of achieving it. For a given state in the search space, all possible subgoals are looked up in the pattern database, with the maximum cost over all lookups being the lower bound. For sliding tile puzzles, the database enumerates all possible patterns containing N tiles and. for each one, contains a lower bound on the distance to correctly move all N tiles into their correct final location. For the 15-Puzzle, iterative-deepening A* with pattern databases (N = 8) reduces the total number of nodes searched on a standard problem set of 100 positions by over 1000-fold.},
author = {Culberson, Joseph C. and Schaeffer, Jonathan},
doi = {10.1111/0824-7935.00065},
file = {:home/jorrit/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Culberson, Schaeffer - 1998 - Pattern databases.pdf:pdf},
issn = {08247935},
journal = {Computational Intelligence},
keywords = {A*,IDA*,Pattern databases,Single-agent search},
number = {3},
pages = {318--334},
title = {{Pattern databases}},
volume = {14},
year = {1998}
}
@book{discrete_algebra,
author = {Cools, Ronald and Vandewalle, Joos and Bultheel, Adhemar},
keywords = {KU Leuven [H01G5a]},
mendeley-tags = {KU Leuven [H01G5a]},
pages = {281},
title = {{Cursus toegepaste discrete algebra}},
year = {2021}
}
@article{n_puzzle_np_complete,
author = {Ratner, Daniel and Warmuth, Manfred},
file = {:home/jorrit/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Ratner, Warmuth - 1986 - Finding a Shortest Solution for the NxN Extension of the 15-Puzzle Is Intractable.pdf:pdf},
journal = {Proc. of the 4th National Conference on Artificial Intelligence (AAAI '86)},
pages = {168--172},
title = {{Finding a Shortest Solution for the NxN Extension of the 15-Puzzle Is Intractable}},
year = {1986}
}
@book{handboek_algorithms,
abstract = {Essential Information about Algorithms and Data Structures A Classic Reference The latest version of Sedgewick, s best-selling series, reflecting an indispensable body of knowledge developed over the past several decades. Broad Coverage Full treatment of data structures and algorithms for sorting, searching, graph processing, and string processing, including fifty algorithms every programmer should know.},
address = {Upper Saddle River, NJ},
author = {Sedgewick, Robert and Wayne, Kevin},
edition = {4th ed.},
isbn = {9780321573513},
keywords = {Mathematics of computing},
publisher = {Addison-Wesley},
title = {{Algorithms}},
year = {2011}
}
@techreport{A_star_De_Raedt,
author = {{De Raedt}, Luc},
file = {:home/jorrit/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/De Raedt - 2020 - Slides Artifici{\"{e}}le Intelligentie Graph Search.pdf:pdf},
institution = {KU Leuven [H06U2a]},
pages = {51},
title = {{Slides Artifici{\"{e}}le Intelligentie Graph Search}},
year = {2020}
}
@inproceedings{linear_conflicts,
author = {Sanz, Victoria and {De Giusti}, Armando and Chichizola, Franco and Naiouf, Marcelo and {De Giusti}, Laura},
booktitle = {Proceedings of the International Conference on Information Technology Interfaces, ITI},
doi = {10.1109/ITI.2008.4588527},
pages = {879--884},
title = {{Parallel processing Puzzle N-2-1 on cluster architectures performance analysis}},
year = {2008}
}
@techreport{opgave,
author = {Deruyttere, Thierry},
institution = {KU Leuven},
pages = {1--8},
title = {{Gegevensstructuren en Algoritmen: Practicum 2}},
url = {https://p.cygnus.cc.kuleuven.be/webapps/blackboard/content/listContent.jsp?course_id=_961494_1&content_id=_29625916_1},
year = {2021}
}
